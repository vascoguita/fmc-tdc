---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Timestamp FIFO
---------------------------------------------------------------------------------------
-- File           : timestamp_fifo_wb.vhd
-- Author         : auto-generated by wbgen2 from wbgen/timestamp_fifo_wb.wb
-- Created        : Mon Apr 20 17:34:12 2015
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wbgen/timestamp_fifo_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.tsf_wbgen2_pkg.all;


entity timestamp_fifo_wb is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(3 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    clk_tdc_i                                : in     std_logic;
    regs_i                                   : in     t_tsf_in_registers;
    regs_o                                   : out    t_tsf_out_registers
  );
end timestamp_fifo_wb;

architecture syn of timestamp_fifo_wb is

signal tsf_fifo_rst_n                           : std_logic      ;
signal tsf_fifo_in_int                          : std_logic_vector(127 downto 0);
signal tsf_fifo_out_int                         : std_logic_vector(127 downto 0);
signal tsf_fifo_rdreq_int                       : std_logic      ;
signal tsf_fifo_rdreq_int_d0                    : std_logic      ;
signal tsf_lts0_int                             : std_logic_vector(31 downto 0);
signal tsf_lts0_lwb                             : std_logic      ;
signal tsf_lts0_lwb_delay                       : std_logic      ;
signal tsf_lts0_lwb_in_progress                 : std_logic      ;
signal tsf_lts0_lwb_s0                          : std_logic      ;
signal tsf_lts0_lwb_s1                          : std_logic      ;
signal tsf_lts0_lwb_s2                          : std_logic      ;
signal tsf_lts1_int                             : std_logic_vector(31 downto 0);
signal tsf_lts1_lwb                             : std_logic      ;
signal tsf_lts1_lwb_delay                       : std_logic      ;
signal tsf_lts1_lwb_in_progress                 : std_logic      ;
signal tsf_lts1_lwb_s0                          : std_logic      ;
signal tsf_lts1_lwb_s1                          : std_logic      ;
signal tsf_lts1_lwb_s2                          : std_logic      ;
signal tsf_lts2_int                             : std_logic_vector(31 downto 0);
signal tsf_lts2_lwb                             : std_logic      ;
signal tsf_lts2_lwb_delay                       : std_logic      ;
signal tsf_lts2_lwb_in_progress                 : std_logic      ;
signal tsf_lts2_lwb_s0                          : std_logic      ;
signal tsf_lts2_lwb_s1                          : std_logic      ;
signal tsf_lts2_lwb_s2                          : std_logic      ;
signal tsf_lts3_int                             : std_logic_vector(31 downto 0);
signal tsf_lts3_lwb                             : std_logic      ;
signal tsf_lts3_lwb_delay                       : std_logic      ;
signal tsf_lts3_lwb_in_progress                 : std_logic      ;
signal tsf_lts3_lwb_s0                          : std_logic      ;
signal tsf_lts3_lwb_s1                          : std_logic      ;
signal tsf_lts3_lwb_s2                          : std_logic      ;
signal tsf_csr_last_valid_int_read              : std_logic      ;
signal tsf_csr_last_valid_int_write             : std_logic      ;
signal tsf_csr_last_valid_lw                    : std_logic      ;
signal tsf_csr_last_valid_lw_delay              : std_logic      ;
signal tsf_csr_last_valid_lw_read_in_progress   : std_logic      ;
signal tsf_csr_last_valid_lw_s0                 : std_logic      ;
signal tsf_csr_last_valid_lw_s1                 : std_logic      ;
signal tsf_csr_last_valid_lw_s2                 : std_logic      ;
signal tsf_csr_last_valid_rwsel                 : std_logic      ;
signal tsf_csr_rst_seq_int                      : std_logic      ;
signal tsf_csr_rst_seq_int_delay                : std_logic      ;
signal tsf_csr_rst_seq_sync0                    : std_logic      ;
signal tsf_csr_rst_seq_sync1                    : std_logic      ;
signal tsf_csr_rst_seq_sync2                    : std_logic      ;
signal tsf_fifo_full_int                        : std_logic      ;
signal tsf_fifo_empty_int                       : std_logic      ;
signal tsf_fifo_clear_bus_int                   : std_logic      ;
signal tsf_fifo_usedw_int                       : std_logic_vector(9 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tsf_lts0_lwb <= '0';
      tsf_lts0_lwb_delay <= '0';
      tsf_lts0_lwb_in_progress <= '0';
      tsf_lts1_lwb <= '0';
      tsf_lts1_lwb_delay <= '0';
      tsf_lts1_lwb_in_progress <= '0';
      tsf_lts2_lwb <= '0';
      tsf_lts2_lwb_delay <= '0';
      tsf_lts2_lwb_in_progress <= '0';
      tsf_lts3_lwb <= '0';
      tsf_lts3_lwb_delay <= '0';
      tsf_lts3_lwb_in_progress <= '0';
      tsf_csr_last_valid_lw <= '0';
      tsf_csr_last_valid_lw_delay <= '0';
      tsf_csr_last_valid_lw_read_in_progress <= '0';
      tsf_csr_last_valid_rwsel <= '0';
      tsf_csr_last_valid_int_write <= '0';
      tsf_csr_rst_seq_int <= '0';
      tsf_csr_rst_seq_int_delay <= '0';
      tsf_fifo_clear_bus_int <= '0';
      tsf_fifo_rdreq_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          tsf_fifo_clear_bus_int <= '0';
          ack_in_progress <= '0';
        else
          tsf_lts0_lwb <= tsf_lts0_lwb_delay;
          tsf_lts0_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tsf_lts0_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= tsf_lts0_int;
            tsf_lts0_lwb_in_progress <= '0';
          end if;
          tsf_lts1_lwb <= tsf_lts1_lwb_delay;
          tsf_lts1_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tsf_lts1_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= tsf_lts1_int;
            tsf_lts1_lwb_in_progress <= '0';
          end if;
          tsf_lts2_lwb <= tsf_lts2_lwb_delay;
          tsf_lts2_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tsf_lts2_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= tsf_lts2_int;
            tsf_lts2_lwb_in_progress <= '0';
          end if;
          tsf_lts3_lwb <= tsf_lts3_lwb_delay;
          tsf_lts3_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (tsf_lts3_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= tsf_lts3_int;
            tsf_lts3_lwb_in_progress <= '0';
          end if;
          tsf_csr_last_valid_lw <= tsf_csr_last_valid_lw_delay;
          tsf_csr_last_valid_lw_delay <= '0';
          if ((ack_sreg(1) = '1') and (tsf_csr_last_valid_lw_read_in_progress = '1')) then
            rddata_reg(0) <= tsf_csr_last_valid_int_read;
            tsf_csr_last_valid_lw_read_in_progress <= '0';
          end if;
          tsf_csr_rst_seq_int <= tsf_csr_rst_seq_int_delay;
          tsf_csr_rst_seq_int_delay <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              tsf_lts0_lwb <= '1';
              tsf_lts0_lwb_delay <= '1';
              tsf_lts0_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              tsf_lts1_lwb <= '1';
              tsf_lts1_lwb_delay <= '1';
              tsf_lts1_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              tsf_lts2_lwb <= '1';
              tsf_lts2_lwb_delay <= '1';
              tsf_lts2_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              tsf_lts3_lwb <= '1';
              tsf_lts3_lwb_delay <= '1';
              tsf_lts3_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
              tsf_csr_last_valid_int_write <= wrdata_reg(0);
              tsf_csr_last_valid_lw <= '1';
              tsf_csr_last_valid_lw_delay <= '1';
              tsf_csr_last_valid_lw_read_in_progress <= '0';
              tsf_csr_last_valid_rwsel <= '1';
              tsf_csr_rst_seq_int <= wrdata_reg(1);
              tsf_csr_rst_seq_int_delay <= wrdata_reg(1);
            end if;
            if (wb_we_i = '0') then
              rddata_reg(0) <= 'X';
              tsf_csr_last_valid_lw <= '1';
              tsf_csr_last_valid_lw_delay <= '1';
              tsf_csr_last_valid_lw_read_in_progress <= '1';
              tsf_csr_last_valid_rwsel <= '0';
            end if;
            rddata_reg(1) <= '0';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
            end if;
            if (tsf_fifo_rdreq_int_d0 = '0') then
              tsf_fifo_rdreq_int <= not tsf_fifo_rdreq_int;
            else
              rddata_reg(31 downto 0) <= tsf_fifo_out_int(31 downto 0);
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end if;
          when "0110" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= tsf_fifo_out_int(63 downto 32);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= tsf_fifo_out_int(95 downto 64);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= tsf_fifo_out_int(127 downto 96);
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001" => 
            if (wb_we_i = '1') then
              if (wrdata_reg(18) = '1') then
                tsf_fifo_clear_bus_int <= '1';
              end if;
            end if;
            rddata_reg(16) <= tsf_fifo_full_int;
            rddata_reg(17) <= tsf_fifo_empty_int;
            rddata_reg(18) <= '0';
            rddata_reg(9 downto 0) <= tsf_fifo_usedw_int;
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- extra code for reg/fifo/mem: Timestamp FIFO
  tsf_fifo_in_int(31 downto 0) <= regs_i.fifo_ts0_i;
  tsf_fifo_in_int(63 downto 32) <= regs_i.fifo_ts1_i;
  tsf_fifo_in_int(95 downto 64) <= regs_i.fifo_ts2_i;
  tsf_fifo_in_int(127 downto 96) <= regs_i.fifo_ts3_i;
  tsf_fifo_rst_n <= rst_n_i and (not tsf_fifo_clear_bus_int);
  tsf_fifo_INST : wbgen2_fifo_async
    generic map (
      g_size               => 1024,
      g_width              => 128,
      g_usedw_size         => 10
    )
    port map (
      wr_req_i             => regs_i.fifo_wr_req_i,
      wr_full_o            => regs_o.fifo_wr_full_o,
      wr_empty_o           => regs_o.fifo_wr_empty_o,
      wr_usedw_o           => regs_o.fifo_wr_usedw_o,
      rd_full_o            => tsf_fifo_full_int,
      rd_empty_o           => tsf_fifo_empty_int,
      rd_usedw_o           => tsf_fifo_usedw_int,
      rd_req_i             => tsf_fifo_rdreq_int,
      rst_n_i              => tsf_fifo_rst_n,
      wr_clk_i             => clk_tdc_i,
      rd_clk_i             => clk_sys_i,
      wr_data_i            => tsf_fifo_in_int,
      rd_data_o            => tsf_fifo_out_int
    );
  
-- Last Timestamp Word 0
-- asynchronous std_logic_vector register : Last Timestamp Word 0 (type RO/WO, clk_tdc_i <-> clk_sys_i)
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_lts0_lwb_s0 <= '0';
      tsf_lts0_lwb_s1 <= '0';
      tsf_lts0_lwb_s2 <= '0';
      tsf_lts0_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_tdc_i) then
      tsf_lts0_lwb_s0 <= tsf_lts0_lwb;
      tsf_lts0_lwb_s1 <= tsf_lts0_lwb_s0;
      tsf_lts0_lwb_s2 <= tsf_lts0_lwb_s1;
      if ((tsf_lts0_lwb_s1 = '1') and (tsf_lts0_lwb_s2 = '0')) then
        tsf_lts0_int <= regs_i.lts0_i;
      end if;
    end if;
  end process;
  
  
-- Last Timestamp Word 1
-- asynchronous std_logic_vector register : Last Timestamp Word 1 (type RO/WO, clk_tdc_i <-> clk_sys_i)
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_lts1_lwb_s0 <= '0';
      tsf_lts1_lwb_s1 <= '0';
      tsf_lts1_lwb_s2 <= '0';
      tsf_lts1_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_tdc_i) then
      tsf_lts1_lwb_s0 <= tsf_lts1_lwb;
      tsf_lts1_lwb_s1 <= tsf_lts1_lwb_s0;
      tsf_lts1_lwb_s2 <= tsf_lts1_lwb_s1;
      if ((tsf_lts1_lwb_s1 = '1') and (tsf_lts1_lwb_s2 = '0')) then
        tsf_lts1_int <= regs_i.lts1_i;
      end if;
    end if;
  end process;
  
  
-- Last Timestamp Word 2
-- asynchronous std_logic_vector register : Last Timestamp Word 2 (type RO/WO, clk_tdc_i <-> clk_sys_i)
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_lts2_lwb_s0 <= '0';
      tsf_lts2_lwb_s1 <= '0';
      tsf_lts2_lwb_s2 <= '0';
      tsf_lts2_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_tdc_i) then
      tsf_lts2_lwb_s0 <= tsf_lts2_lwb;
      tsf_lts2_lwb_s1 <= tsf_lts2_lwb_s0;
      tsf_lts2_lwb_s2 <= tsf_lts2_lwb_s1;
      if ((tsf_lts2_lwb_s1 = '1') and (tsf_lts2_lwb_s2 = '0')) then
        tsf_lts2_int <= regs_i.lts2_i;
      end if;
    end if;
  end process;
  
  
-- Last Timestamp Word 3
-- asynchronous std_logic_vector register : Last Timestamp Word 3 (type RO/WO, clk_tdc_i <-> clk_sys_i)
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_lts3_lwb_s0 <= '0';
      tsf_lts3_lwb_s1 <= '0';
      tsf_lts3_lwb_s2 <= '0';
      tsf_lts3_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_tdc_i) then
      tsf_lts3_lwb_s0 <= tsf_lts3_lwb;
      tsf_lts3_lwb_s1 <= tsf_lts3_lwb_s0;
      tsf_lts3_lwb_s2 <= tsf_lts3_lwb_s1;
      if ((tsf_lts3_lwb_s1 = '1') and (tsf_lts3_lwb_s2 = '0')) then
        tsf_lts3_int <= regs_i.lts3_i;
      end if;
    end if;
  end process;
  
  
-- Last Timestamp Valid
-- asynchronous BIT register : Last Timestamp Valid (type RW/WO, clk_tdc_i <-> clk_sys_i)
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_csr_last_valid_lw_s0 <= '0';
      tsf_csr_last_valid_lw_s1 <= '0';
      tsf_csr_last_valid_lw_s2 <= '0';
      tsf_csr_last_valid_int_read <= '0';
      regs_o.csr_last_valid_load_o <= '0';
      regs_o.csr_last_valid_o <= '0';
    elsif rising_edge(clk_tdc_i) then
      tsf_csr_last_valid_lw_s0 <= tsf_csr_last_valid_lw;
      tsf_csr_last_valid_lw_s1 <= tsf_csr_last_valid_lw_s0;
      tsf_csr_last_valid_lw_s2 <= tsf_csr_last_valid_lw_s1;
      if ((tsf_csr_last_valid_lw_s2 = '0') and (tsf_csr_last_valid_lw_s1 = '1')) then
        if (tsf_csr_last_valid_rwsel = '1') then
          regs_o.csr_last_valid_o <= tsf_csr_last_valid_int_write;
          regs_o.csr_last_valid_load_o <= '1';
        else
          regs_o.csr_last_valid_load_o <= '0';
          tsf_csr_last_valid_int_read <= regs_i.csr_last_valid_i;
        end if;
      else
        regs_o.csr_last_valid_load_o <= '0';
      end if;
    end if;
  end process;
  
  
-- Reset Sequence Counter
  process (clk_tdc_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.csr_rst_seq_o <= '0';
      tsf_csr_rst_seq_sync0 <= '0';
      tsf_csr_rst_seq_sync1 <= '0';
      tsf_csr_rst_seq_sync2 <= '0';
    elsif rising_edge(clk_tdc_i) then
      tsf_csr_rst_seq_sync0 <= tsf_csr_rst_seq_int;
      tsf_csr_rst_seq_sync1 <= tsf_csr_rst_seq_sync0;
      tsf_csr_rst_seq_sync2 <= tsf_csr_rst_seq_sync1;
      regs_o.csr_rst_seq_o <= tsf_csr_rst_seq_sync2 and (not tsf_csr_rst_seq_sync1);
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 0
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tsf_fifo_rdreq_int_d0 <= '0';
    elsif rising_edge(clk_sys_i) then
      tsf_fifo_rdreq_int_d0 <= tsf_fifo_rdreq_int;
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 1
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 2
-- extra code for reg/fifo/mem: FIFO 'Timestamp FIFO' data output register 3
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
